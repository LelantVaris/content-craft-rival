
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('=== GENERATE TITLES DEBUG - STEP 2: OPENAI API TEST ===');
  console.log('Request method:', req.method);
  console.log('Request URL:', req.url);

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('Handling CORS preflight request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Step 2: Testing OpenAI API key access and direct API call...');
    
    // Test OpenAI API key access
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    console.log('OpenAI API key exists:', !!openAIApiKey);
    console.log('OpenAI API key length:', openAIApiKey ? openAIApiKey.length : 0);
    console.log('OpenAI API key prefix:', openAIApiKey ? openAIApiKey.substring(0, 7) + '...' : 'none');

    if (!openAIApiKey) {
      console.error('OpenAI API key not found in environment');
      return new Response(JSON.stringify({ 
        error: 'OpenAI API key not configured',
        debug: 'OPENAI_API_KEY environment variable is missing'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Test request parsing
    let requestBody;
    try {
      requestBody = await req.json();
      console.log('Request body parsed successfully:', requestBody);
    } catch (parseError) {
      console.error('Request parsing error:', parseError);
      return new Response(JSON.stringify({
        error: 'Invalid request body',
        debug: parseError.message
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { topic } = requestBody;
    
    if (!topic) {
      console.error('Topic missing from request');
      return new Response(JSON.stringify({ 
        error: 'Topic is required',
        debug: 'No topic provided in request body'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('Topic received:', topic);

    // Test direct OpenAI API call
    console.log('Making direct OpenAI API call...');
    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are a professional content marketing expert. Generate engaging, SEO-optimized article titles.'
          },
          {
            role: 'user',
            content: `Generate 5 compelling article titles for the topic: "${topic}". Make them engaging, SEO-friendly, and varied in style (how-to, listicle, guide, etc.).`
          }
        ],
        max_tokens: 200,
        temperature: 0.7
      })
    });

    console.log('OpenAI API response status:', openAIResponse.status);
    console.log('OpenAI API response headers:', Object.fromEntries(openAIResponse.headers.entries()));

    if (!openAIResponse.ok) {
      const errorText = await openAIResponse.text();
      console.error('OpenAI API error:', errorText);
      return new Response(JSON.stringify({ 
        error: 'OpenAI API call failed',
        debug: {
          status: openAIResponse.status,
          statusText: openAIResponse.statusText,
          error: errorText
        }
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const openAIData = await openAIResponse.json();
    console.log('OpenAI API response data:', openAIData);

    const generatedContent = openAIData.choices?.[0]?.message?.content;
    console.log('Generated content:', generatedContent);

    if (!generatedContent) {
      console.error('No content generated by OpenAI');
      return new Response(JSON.stringify({ 
        error: 'No content generated',
        debug: 'OpenAI response did not contain generated content'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Try to parse the generated content into individual titles
    const titleLines = generatedContent.split('\n').filter(line => line.trim() && !line.match(/^\d+\.\s*$/));
    const titles = titleLines.map(line => line.replace(/^\d+\.\s*/, '').trim()).filter(title => title);

    console.log('Parsed titles:', titles);

    if (titles.length === 0) {
      console.error('No titles could be parsed from generated content');
      return new Response(JSON.stringify({ 
        error: 'Failed to parse titles',
        debug: {
          generatedContent,
          titleLines,
          titles
        }
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('=== SUCCESS: OpenAI API call successful ===');
    return new Response(JSON.stringify({ 
      titles: titles.slice(0, 5), // Return max 5 titles
      debug: {
        phase: 'step_2_complete',
        method: 'direct_openai_api',
        topic: topic,
        openAIResponse: {
          status: openAIResponse.status,
          titlesGenerated: titles.length
        }
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('=== UNEXPECTED ERROR IN STEP 2 ===');
    console.error('Error type:', typeof error);
    console.error('Error name:', error.name);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    
    return new Response(JSON.stringify({ 
      error: 'Unexpected server error in step 2',
      debug: {
        message: error.message,
        type: error.name,
        step: 'openai_api_test'
      }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
